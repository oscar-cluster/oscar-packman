#!/usr/bin/env perl 
#
# Copyright (c) 2007-2008 Oak Ridge National Laboratory
#                         Geoffroy Vallee <valleegr@ornl.gov>
#                         All rights reserved
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$
#

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use warnings "all";
use Carp;
use OSCAR::PackageSmart;
use OSCAR::PackManDefs;
use Getopt::Long;
use Data::Dumper;

my ($prepare_repo, $root, $distro);
my $verbose;

Getopt::Long::Configure("pass_through");
GetOptions(
        "distro=s"                      => \$distro,
        "prepare-repo=s"                => \$prepare_repo,
        "root=s"                        => \$root,
        "verbose"                       => \$verbose,
        "v"                             => \$verbose,
        "help"                          => \&help_and_exit,
        ) || help_and_die();

# Validate the packman command requested by the user.
#
# Input: cmd, the command that the user wants to execute.
# Return: 1 if the command is valid, 0 else.
sub command_is_valid ($) {
    my $cmd = shift;

    if ( OSCAR::Utils::is_a_valid_string ($cmd) && (($cmd eq "install")
        || ($cmd eq "remove") || ($cmd eq "search") || ($cmd eq "show"))) {
        return 1;
    } else {
        return 0;
    }
}

$ENV{PACKMAN_VERBOSE} = 1 if ($verbose);

if ($prepare_repo && defined $ARGV[0]) {
    die "ERROR: it seems you try to do multiple actions at the same time, ".
        "this is not allowed.";
}

if ($prepare_repo) {
    print "Preparing repository $prepare_repo\n" if $verbose;
    my $pm = OSCAR::PackageSmart::prepare_pool ($verbose, $prepare_repo);
    if (!defined $pm) {
        die "ERROR: Impossible to prepare the repository $prepare_repo";
    } else {
        print "Repository $prepare_repo is now ready.\n";
    }
    exit 0;
}

my $cmd = $ARGV[0];
if ( command_is_valid ($cmd) == 0 ) {
    die "ERROR: you try to execute an unsupported command $ARGV[0]";
} else {
    if (!OSCAR::Utils::is_a_valid_string ($distro)) {
        die "ERROR: You must specify which distro to use to manage packages";
    }

    # Based on the distro id we detect the underneath binary package format
    # (remember that PackMan cannot abstract that format).
    require OSCAR::PackagePath;
    my ($dist, $ver, $arch) 
        = OSCAR::PackagePath::decompose_distro_id ($distro);
    my $os = OSCAR::OCA::OS_Detect::open (fake=>{ distro=>$dist,
                                                  distro_version=>$ver,
                                                  arch=>$arch});
    die "ERROR: Impossible to decompose the distro ID" if (!defined $os);
    print "[PackMan] Binary package format: ". $os->{pkg} ."\n" if $verbose;
    require OSCAR::PackMan;
    my $pm;
    if ($os->{pkg} eq "deb") {
        $pm = PackMan::DEB->new;
    } elsif ($os->{pkg} eq "rpm") {
        $pm = PackMan::RPM->new;
    } else {
        die "ERROR: Unknown binary package format (".$os->{pkg}.")";
    }
    
    if (!defined $pm) {
        die "ERROR: Impossible to create a PackMan object";
    }
    if ($pm->distro($distro) == 0) {
        die "ERROR: Impossible to specify the distro of the PackMan object";
    }
    print $pm->status if $verbose;
    if (defined $root) {
        if ($pm->chroot($root) == 0) {
            die "ERROR: Impossible to specify the root of the PackMan object";
        }
    }

    #
    # For most of the commands, the argument is a list of packages. So, we
    # parse the arguments/
    #
    my @pkgs;
    my $pattern;
    if ($cmd ne "search") {
        my $pos = 1;
        foreach my $p (1 .. $#ARGV ) {
            push (@pkgs, $ARGV[$p]);
            $pos++;
        }
        if (scalar (@pkgs) == 0) {
            print "[INFO] No packages to look for\n" if $verbose;
            exit 0;
        }
        if ($verbose) {
            print "Packages to install: ";
            OSCAR::Utils::print_array (@pkgs);
        }
    } else {
        $pattern = $ARGV[1]
    }
    print "INFO: Executing commands based on the distro $distro " if $verbose;
    print "(in $root) " if ($verbose && defined $root);
    print "\n" if $verbose;
    my ($rc, @output);
    if ($cmd eq "install") {
        ($rc, @output) = $pm->smart_install(@pkgs);
        if ($rc == ERROR) {
            die "ERROR: Impossible to install " . join (", ", @pkgs) . " ("
                . join ("\n", @output) . ")";
        }
    } elsif ($cmd eq "remove") {
        ($rc, @output) = $pm->remove(@pkgs);
        if ($rc == ERROR) {
            die "ERROR: Impossible to remove " . join (", ", @pkgs);
        }
    } elsif ($cmd eq "search") {
        ($rc, @output) = $pm->search_repo($pattern);
        if ($rc != 0) {
            die "ERROR: Impossible to search for packages ($rc, $pattern, \n" .
                join ("\n", @output) . ")";
        } else {
            print (join ("\n", @output));
        }
    } elsif ($cmd eq "show") {
        my %data;
        ($rc, %data) = $pm->show_repo(@pkgs);
        if ($rc != 0) {
            die "ERROR: Impossible to show details of packages "
                . join (", ", @pkgs);
        } else {
            print Dumper %data;
        }
    } else {
        die "ERROR: Unsupported command ($cmd)";
    }
    exit 0;
}

sub help () {
    print "Please execute \"man packman\"\n";
}

sub help_and_die {
    help ();
    exit 1;
}

sub help_and_exit {
    help ();
    exit 0;
}

help_and_die();

exit 1;


__END__

=head1 NAME

packman, a command line tool for the PackMan Perl module.

=head1 DESCRIPTION

The packman script is a simple command line interface (CLI) for the PackMan
Perl module. Therefore, this script allows one to manipulate binary packages
transparently, the underneath binary package format being abstracted.

=head1 SYNTAX

packman [OPTIONS] COMMANDS

=head1 OPTIONS

Recognized options include:

=over 8

=item --distro

Specify the Linux distribution that should be used to perform the commands. 
Typically this parameter will allow PackMan to identify the OSCAR repositories
that must be used for the command execution.

=item --prepare-repo <repo_path>

Prepare a local repository of binary packages (repository available at "repo_path").

=item --root

Specify the root where the commands should be executed (a chroot is typically used).

=item --verbose | --v

Enable the verbose mode (usefull for debugging).

=item --help

Help information.

=back

=head1 Examples

=over 8

=item Package installation:

Install the dpkg package into the image stored in /tmp/test:

sudo packman --root /tmp/test/ --distro ubuntu-7-i386 install dpkg 

Note that if the image does not already exists, the image will be bootstrapped.

=back

=head1 AUTHOR

Geoffroy Vallee, Oak Ridge National Laboratory <valleegr at ornl dot gov>

=head1 SEE ALSO

perl(1), perldoc OSCAR::PackMan, perldoc OSCAR::PackMan::DEB, perldoc OSCAR::PackMan::RPM

=cut
